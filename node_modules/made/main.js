#!/usr/bin/env node
// Generated by CoffeeScript 1.5.0
(function() {
  var chokidar, exec, findCommands, fs, getCommands, handleErr, main, matchTemplate, minimatch, parseFile, path, sys, watcherCb,
    __slice = [].slice;

  fs = require('fs');

  exec = require('child_process').exec;

  sys = require('sys');

  path = require('path');

  minimatch = require('minimatch');

  chokidar = require('chokidar');

  main = function() {
    var watcher;
    console.log(process.cwd());
    watcher = chokidar.watch(process.cwd(), {
      persistent: true
    });
    watcher.on('add', watcherCb).on('change', watcherCb).on('unlink', function(path) {
      return console.log('File', path, 'has been removed');
    }).on('error', function(error) {
      return handleErr(error);
    });
    return process.on('exit', function() {
      return watcher.close;
    });
  };

  watcherCb = function(changedPath) {
    var changedFile, cmd, cmds, templates, _i, _len, _results;
    changedFile = path.basename(changedPath);
    console.log(changedFile, 'has changed');
    templates = parseFile('Madefile');
    console.log(templates);
    cmds = getCommands(templates, changedFile);
    _results = [];
    for (_i = 0, _len = cmds.length; _i < _len; _i++) {
      cmd = cmds[_i];
      console.log('$>', cmd);
      _results.push(exec(cmd, function(error, stdout, stderr) {
        if (!!stdout) {
          console.log(stdout);
        }
        if (!!stderr) {
          console.error(stderr);
        }
        return handleErr(error);
      }));
    }
    return _results;
  };

  parseFile = function(path) {
    var contents, line, _i, _len, _ref, _results;
    contents = fs.readFileSync(path, 'utf8');
    _ref = contents.split('\n');
    _results = [];
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      line = _ref[_i];
      if (line.indexOf('$ ' === 0)) {
        _results.push(line.slice(2).split(' '));
      }
    }
    return _results;
  };

  getCommands = function(templates, changedPath) {
    var cmd, cmds, tmpl, _i, _len;
    cmds = [];
    for (_i = 0, _len = templates.length; _i < _len; _i++) {
      tmpl = templates[_i];
      cmd = matchTemplate(tmpl, changedPath);
      if (cmd !== '') {
        cmds.push(cmd);
      }
    }
    return cmds;
  };

  matchTemplate = function(tmpl, file) {
    var arg, first, i, last, matched, mid, pattern, _i, _j, _len;
    matched = false;
    for (i = _i = 0, _len = tmpl.length; _i < _len; i = ++_i) {
      arg = tmpl[i];
      first = arg[0], mid = 3 <= arg.length ? __slice.call(arg, 1, _j = arg.length - 1) : (_j = 1, []), last = arg[_j++];
      pattern = arg.slice(1, +(arg.length - 2) + 1 || 9e9);
      if (first === '[' && last === ']' && minimatch(file, pattern)) {
        tmpl[i] = file;
        matched = true;
      }
      if (first === '{' && last === '}') {
        tmpl[i] = pattern.replace('%b', path.basename(file, path.extname(file)));
      }
    }
    if (matched) {
      return tmpl.join(' ');
    } else {
      return '';
    }
  };

  handleErr = function(err) {
    var k, v;
    if (err) {
      for (k in err) {
        v = err[k];
        console.log(k, ': ', v);
      }
      return process.exit(1);
    }
  };

  findCommands = function(templates, file) {
    var cmds, template, _i, _len;
    cmds = [];
    for (_i = 0, _len = templates.length; _i < _len; _i++) {
      template = templates[_i];
      cmds = matchTemplate(template, file);
    }
    return cmds;
  };

  main();

}).call(this);

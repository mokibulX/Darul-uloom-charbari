fs = require 'fs'
exec = require('child_process').exec
sys = require 'sys'
path = require 'path'

#program = require 'commander'
#glob = require 'glob'
minimatch = require 'minimatch'
chokidar = require 'chokidar'

main = ->
	console.log process.cwd()
	watcher = chokidar.watch process.cwd(), {persistent: true}
	watcher
	  .on('add', watcherCb)
	  .on('change', watcherCb)
	  .on 'unlink', (path) ->
	  	console.log 'File', path, 'has been removed'
	  .on 'error', (error) ->
	  	handleErr error

	process.on 'exit', ->
		watcher.close #not sure if this is required

watcherCb = (changedPath) ->
	changedFile = path.basename changedPath
	console.log changedFile, 'has changed'
	templates = parseFile 'Madefile'
	console.log templates
	cmds = getCommands templates, changedFile
	for cmd in cmds
		console.log '$>', cmd
		exec cmd, (error, stdout, stderr) ->
			console.log stdout unless not stdout
			console.error stderr unless not stderr
			handleErr error

parseFile = (path) ->
	contents  = fs.readFileSync path, 'utf8'
	line.slice(2).split ' ' for line in contents.split '\n' when line.indexOf '$ ' == 0

getCommands = (templates, changedPath) ->
	cmds = []
	for tmpl in templates
		cmd = matchTemplate tmpl, changedPath
		if cmd != ''
			cmds.push cmd
	return cmds

matchTemplate = (tmpl, file) ->
	matched = false
	for arg, i in tmpl
		[first, mid..., last] = arg
		pattern = arg[1..arg.length-2]
		#console.log first, last, pattern, i, arg.length-1, minimatch(file, pattern, {})
		if first == '[' and last == ']' and minimatch file, pattern
			#console.log 'matched: ', pattern
			tmpl[i] = file
			matched = true
		if first == '{' and last == '}'
			tmpl[i] = pattern.replace(
				'%b', path.basename(file, path.extname file))
	if matched
		return tmpl.join ' '
	else
		return ''

handleErr = (err) ->
	if err
		console.log k, ': ', v for k,v of err
		process.exit 1

#fs.openSync 'test.txt', 'w', (err, fd) ->
#	handleErr err
#
#fs.openSync 'test2.txt', 'w', (err, fd) ->
#	handleErr err

#console.log watcher

findCommands = (templates, file) ->
	cmds = []
	for template in templates
		cmds = matchTemplate template, file
	return cmds

#console.log 'result: ', matchTemplate ['cp', '[*.txt]', '{%b.html}'], 'test.txt'

main()